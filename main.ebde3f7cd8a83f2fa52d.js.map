{"version":3,"sources":["webpack:///./index.js"],"names":["makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"2JA+CMA,EAAkB,SAAAC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAN+BC,EAAKC,EAM9BC,GANyBF,EAMS,IANJC,EAMS,IALxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WACUH,KAAKE,SAAW,GAGjCP,EAAQ,CAAES,GAAIX,EAAYW,GAAIC,KAAMN,IAEpCH,EAAOH,EAAYW,MAEpBL,OAIDO,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxBE,QAAQC,IAAR,eAA2BJ,EAA3B,iBAA8CC,EAA9C,OAGII,EAAW,SAAAL,GACfG,QAAQG,KAAR,gCAA6CN,EAA7C,8BAGFZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,K","file":"main.ebde3f7cd8a83f2fa52d.js","sourcesContent":["import './styles.css';\n\n// ================== task 1 =======================\n// const delay = ms => {\n//   return new Promise(resolve => {\n//     setTimeout(() => {\n//       resolve(ms);\n//     }, ms);\n//   });\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// ================== task 2 =======================\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName) => {\n//   return new Promise(resolve => {\n//     const updatedUsers = allUsers.map(user =>\n//       user.name === userName ? { ...user, active: !user.active } : user,\n//     );\n//     resolve(updatedUsers);\n//   });\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n// ================== task 3 =======================\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}